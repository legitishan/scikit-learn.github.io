
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/ensemble/plot_stack_predictors.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_ensemble_plot_stack_predictors.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_ensemble_plot_stack_predictors.py:


=================================
Combine predictors using stacking
=================================

.. currentmodule:: sklearn

Stacking refers to a method to blend estimators. In this strategy, some
estimators are individually fitted on some training data while a final
estimator is trained using the stacked predictions of these base estimators.

In this example, we illustrate the use case in which different regressors are
stacked together and a final linear penalized regressor is used to output the
prediction. We compare the performance of each individual regressor with the
stacking strategy. Stacking slightly improves the overall performance.

.. GENERATED FROM PYTHON SOURCE LINES 18-28

.. code-block:: default


    # Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>
    #          Maria Telenczuk    <https://github.com/maikia>
    # License: BSD 3 clause

    print(__doc__)

    from sklearn import set_config
    set_config(display='diagram')








.. GENERATED FROM PYTHON SOURCE LINES 29-45

Download the dataset
#############################################################################

 We will use `Ames Housing`_ dataset which was first compiled by Dean De Cock
 and became better known after it was used in Kaggle challenge. It is a set
 of 1460 residential homes in Ames, Iowa, each described by 80 features. We
 will use it to predict the final logarithmic price of the houses. In this
 example we will use only 20 most interesting features chosen using
 GradientBoostingRegressor() and limit number of entries (here we won't go
 into the details on how to select the most interesting features).

 The Ames housing dataset is not shipped with scikit-learn and therefore we
 will fetch it from `OpenML`_.

 .. _`Ames Housing`: http://jse.amstat.org/v19n3/decock.pdf
 .. _`OpenML`: https://www.openml.org/d/42165

.. GENERATED FROM PYTHON SOURCE LINES 45-74

.. code-block:: default


    import numpy as np

    from sklearn.datasets import fetch_openml
    from sklearn.utils import shuffle


    def load_ames_housing():
        df = fetch_openml(name="house_prices", as_frame=True)
        X = df.data
        y = df.target

        features = ['YrSold', 'HeatingQC', 'Street', 'YearRemodAdd', 'Heating',
                    'MasVnrType', 'BsmtUnfSF', 'Foundation', 'MasVnrArea',
                    'MSSubClass', 'ExterQual', 'Condition2', 'GarageCars',
                    'GarageType', 'OverallQual', 'TotalBsmtSF', 'BsmtFinSF1',
                    'HouseStyle', 'MiscFeature', 'MoSold']

        X = X[features]
        X, y = shuffle(X, y, random_state=0)

        X = X[:600]
        y = y[:600]
        return X, np.log(y)


    X, y = load_ames_housing()









.. GENERATED FROM PYTHON SOURCE LINES 75-81

Make pipeline to preprocess the data
#############################################################################

 Before we can use Ames dataset we still need to do some preprocessing.
 First, we will select the categorical and numerical columns of the dataset to
 construct the first step of the pipeline.

.. GENERATED FROM PYTHON SOURCE LINES 81-88

.. code-block:: default


    from sklearn.compose import make_column_selector

    cat_selector = make_column_selector(dtype_include=object)
    num_selector = make_column_selector(dtype_include=np.number)
    cat_selector(X)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ['HeatingQC', 'Street', 'Heating', 'MasVnrType', 'Foundation', 'ExterQual', 'Condition2', 'GarageType', 'HouseStyle', 'MiscFeature']



.. GENERATED FROM PYTHON SOURCE LINES 89-91

.. code-block:: default

    num_selector(X)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ['YrSold', 'YearRemodAdd', 'BsmtUnfSF', 'MasVnrArea', 'MSSubClass', 'GarageCars', 'OverallQual', 'TotalBsmtSF', 'BsmtFinSF1', 'MoSold']



.. GENERATED FROM PYTHON SOURCE LINES 92-101

Then, we will need to design preprocessing pipelines which depends on the
ending regressor. If the ending regressor is a linear model, one needs to
one-hot encode the categories. If the ending regressor is a tree-based model
an ordinal encoder will be sufficient. Besides, numerical values need to be
standardized for a linear model while the raw numerical data can be treated
as is by a tree-based model. However, both models need an imputer to
handle missing values.

We will first design the pipeline required for the tree-based models.

.. GENERATED FROM PYTHON SOURCE LINES 101-115

.. code-block:: default


    from sklearn.compose import make_column_transformer
    from sklearn.impute import SimpleImputer
    from sklearn.pipeline import make_pipeline
    from sklearn.preprocessing import OrdinalEncoder

    cat_tree_processor = OrdinalEncoder(
        handle_unknown="use_encoded_value", unknown_value=-1)
    num_tree_processor = SimpleImputer(strategy="mean", add_indicator=True)

    tree_preprocessor = make_column_transformer(
        (num_tree_processor, num_selector), (cat_tree_processor, cat_selector))
    tree_preprocessor






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-7e3d1cee-135a-44e3-a9c8-6a03b62635c2 {color: black;background-color: white;}#sk-7e3d1cee-135a-44e3-a9c8-6a03b62635c2 pre{padding: 0;}#sk-7e3d1cee-135a-44e3-a9c8-6a03b62635c2 div.sk-toggleable {background-color: white;}#sk-7e3d1cee-135a-44e3-a9c8-6a03b62635c2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.2em 0.3em;box-sizing: border-box;text-align: center;}#sk-7e3d1cee-135a-44e3-a9c8-6a03b62635c2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-7e3d1cee-135a-44e3-a9c8-6a03b62635c2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-7e3d1cee-135a-44e3-a9c8-6a03b62635c2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-7e3d1cee-135a-44e3-a9c8-6a03b62635c2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-7e3d1cee-135a-44e3-a9c8-6a03b62635c2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-7e3d1cee-135a-44e3-a9c8-6a03b62635c2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-7e3d1cee-135a-44e3-a9c8-6a03b62635c2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;margin: 0.25em 0.25em;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;}#sk-7e3d1cee-135a-44e3-a9c8-6a03b62635c2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-7e3d1cee-135a-44e3-a9c8-6a03b62635c2 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-7e3d1cee-135a-44e3-a9c8-6a03b62635c2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-7e3d1cee-135a-44e3-a9c8-6a03b62635c2 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-7e3d1cee-135a-44e3-a9c8-6a03b62635c2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;}#sk-7e3d1cee-135a-44e3-a9c8-6a03b62635c2 div.sk-item {z-index: 1;}#sk-7e3d1cee-135a-44e3-a9c8-6a03b62635c2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-7e3d1cee-135a-44e3-a9c8-6a03b62635c2 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-7e3d1cee-135a-44e3-a9c8-6a03b62635c2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-7e3d1cee-135a-44e3-a9c8-6a03b62635c2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-7e3d1cee-135a-44e3-a9c8-6a03b62635c2 div.sk-parallel-item:only-child::after {width: 0;}#sk-7e3d1cee-135a-44e3-a9c8-6a03b62635c2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0.2em;box-sizing: border-box;padding-bottom: 0.1em;background-color: white;position: relative;}#sk-7e3d1cee-135a-44e3-a9c8-6a03b62635c2 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-7e3d1cee-135a-44e3-a9c8-6a03b62635c2 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-7e3d1cee-135a-44e3-a9c8-6a03b62635c2 div.sk-container {display: inline-block;position: relative;}</style><div id="sk-7e3d1cee-135a-44e3-a9c8-6a03b62635c2" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="0b94ff21-2d8d-473a-87b3-987aa8dbf0bb" type="checkbox" ><label class="sk-toggleable__label" for="0b94ff21-2d8d-473a-87b3-987aa8dbf0bb">ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('simpleimputer',
                                     SimpleImputer(add_indicator=True),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f316935d3d0>),
                                    ('ordinalencoder',
                                     OrdinalEncoder(handle_unknown='use_encoded_value',
                                                    unknown_value=-1),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f316935d100>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f6aae536-1e3e-43f6-b4e6-0247f54a0d85" type="checkbox" ><label class="sk-toggleable__label" for="f6aae536-1e3e-43f6-b4e6-0247f54a0d85">simpleimputer</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f316935d3d0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="1b7d4594-6b59-4db5-ad70-a512a5ee55ef" type="checkbox" ><label class="sk-toggleable__label" for="1b7d4594-6b59-4db5-ad70-a512a5ee55ef">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="5facd508-9455-4c6d-aa8a-dfb58537f280" type="checkbox" ><label class="sk-toggleable__label" for="5facd508-9455-4c6d-aa8a-dfb58537f280">ordinalencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f316935d100></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="7a1ea194-e16d-461a-9872-382d220201d5" type="checkbox" ><label class="sk-toggleable__label" for="7a1ea194-e16d-461a-9872-382d220201d5">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)</pre></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 116-118

Then, we will now define the preprocessor used when the ending regressor
is a linear model.

.. GENERATED FROM PYTHON SOURCE LINES 118-130

.. code-block:: default


    from sklearn.preprocessing import OneHotEncoder
    from sklearn.preprocessing import StandardScaler

    cat_linear_processor = OneHotEncoder(handle_unknown="ignore")
    num_linear_processor = make_pipeline(
        StandardScaler(), SimpleImputer(strategy="mean", add_indicator=True))

    linear_preprocessor = make_column_transformer(
        (num_linear_processor, num_selector), (cat_linear_processor, cat_selector))
    linear_preprocessor






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-ff8794d9-ae38-4fdd-a145-3029f72e9b8c {color: black;background-color: white;}#sk-ff8794d9-ae38-4fdd-a145-3029f72e9b8c pre{padding: 0;}#sk-ff8794d9-ae38-4fdd-a145-3029f72e9b8c div.sk-toggleable {background-color: white;}#sk-ff8794d9-ae38-4fdd-a145-3029f72e9b8c label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.2em 0.3em;box-sizing: border-box;text-align: center;}#sk-ff8794d9-ae38-4fdd-a145-3029f72e9b8c div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-ff8794d9-ae38-4fdd-a145-3029f72e9b8c div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-ff8794d9-ae38-4fdd-a145-3029f72e9b8c input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-ff8794d9-ae38-4fdd-a145-3029f72e9b8c div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-ff8794d9-ae38-4fdd-a145-3029f72e9b8c div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-ff8794d9-ae38-4fdd-a145-3029f72e9b8c input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-ff8794d9-ae38-4fdd-a145-3029f72e9b8c div.sk-estimator {font-family: monospace;background-color: #f0f8ff;margin: 0.25em 0.25em;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;}#sk-ff8794d9-ae38-4fdd-a145-3029f72e9b8c div.sk-estimator:hover {background-color: #d4ebff;}#sk-ff8794d9-ae38-4fdd-a145-3029f72e9b8c div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-ff8794d9-ae38-4fdd-a145-3029f72e9b8c div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-ff8794d9-ae38-4fdd-a145-3029f72e9b8c div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-ff8794d9-ae38-4fdd-a145-3029f72e9b8c div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;}#sk-ff8794d9-ae38-4fdd-a145-3029f72e9b8c div.sk-item {z-index: 1;}#sk-ff8794d9-ae38-4fdd-a145-3029f72e9b8c div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-ff8794d9-ae38-4fdd-a145-3029f72e9b8c div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-ff8794d9-ae38-4fdd-a145-3029f72e9b8c div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-ff8794d9-ae38-4fdd-a145-3029f72e9b8c div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-ff8794d9-ae38-4fdd-a145-3029f72e9b8c div.sk-parallel-item:only-child::after {width: 0;}#sk-ff8794d9-ae38-4fdd-a145-3029f72e9b8c div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0.2em;box-sizing: border-box;padding-bottom: 0.1em;background-color: white;position: relative;}#sk-ff8794d9-ae38-4fdd-a145-3029f72e9b8c div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-ff8794d9-ae38-4fdd-a145-3029f72e9b8c div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-ff8794d9-ae38-4fdd-a145-3029f72e9b8c div.sk-container {display: inline-block;position: relative;}</style><div id="sk-ff8794d9-ae38-4fdd-a145-3029f72e9b8c" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="96c4561b-fd8c-4971-a8ba-836bfafa822d" type="checkbox" ><label class="sk-toggleable__label" for="96c4561b-fd8c-4971-a8ba-836bfafa822d">ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('pipeline',
                                     Pipeline(steps=[('standardscaler',
                                                      StandardScaler()),
                                                     ('simpleimputer',
                                                      SimpleImputer(add_indicator=True))]),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f316935d3d0>),
                                    ('onehotencoder',
                                     OneHotEncoder(handle_unknown='ignore'),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f316935d100>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="979c29e8-70d8-439a-b69d-06b1afa267ad" type="checkbox" ><label class="sk-toggleable__label" for="979c29e8-70d8-439a-b69d-06b1afa267ad">pipeline</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f316935d3d0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="02a77d63-b355-4e49-b223-7ac51c8093a5" type="checkbox" ><label class="sk-toggleable__label" for="02a77d63-b355-4e49-b223-7ac51c8093a5">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="aec22d68-9f20-4ae4-b3f6-abff99d8d752" type="checkbox" ><label class="sk-toggleable__label" for="aec22d68-9f20-4ae4-b3f6-abff99d8d752">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="af495d5b-2757-45a0-b267-11529a37c6b0" type="checkbox" ><label class="sk-toggleable__label" for="af495d5b-2757-45a0-b267-11529a37c6b0">onehotencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f316935d100></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="bc4d1b76-b64f-4c75-885f-1a2bb5177d2e" type="checkbox" ><label class="sk-toggleable__label" for="bc4d1b76-b64f-4c75-885f-1a2bb5177d2e">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown='ignore')</pre></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 131-149

Stack of predictors on a single data set
#############################################################################

 It is sometimes tedious to find the model which will best perform on a given
 dataset. Stacking provide an alternative by combining the outputs of several
 learners, without the need to choose a model specifically. The performance of
 stacking is usually close to the best model and sometimes it can outperform
 the prediction performance of each individual model.

 Here, we combine 3 learners (linear and non-linear) and use a ridge regressor
 to combine their outputs together.

 .. note::
    Although we will make new pipelines with the processors which we wrote in
    the previous section for the 3 learners, the final estimator
    :class:`~sklearn.linear_model.RidgeCV()` does not need preprocessing of
    the data as it will be fed with the already preprocessed output from the 3
    learners.

.. GENERATED FROM PYTHON SOURCE LINES 149-155

.. code-block:: default


    from sklearn.linear_model import LassoCV

    lasso_pipeline = make_pipeline(linear_preprocessor, LassoCV())
    lasso_pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-2ae4113d-63fd-450b-8fa0-91319cffb642 {color: black;background-color: white;}#sk-2ae4113d-63fd-450b-8fa0-91319cffb642 pre{padding: 0;}#sk-2ae4113d-63fd-450b-8fa0-91319cffb642 div.sk-toggleable {background-color: white;}#sk-2ae4113d-63fd-450b-8fa0-91319cffb642 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.2em 0.3em;box-sizing: border-box;text-align: center;}#sk-2ae4113d-63fd-450b-8fa0-91319cffb642 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-2ae4113d-63fd-450b-8fa0-91319cffb642 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-2ae4113d-63fd-450b-8fa0-91319cffb642 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-2ae4113d-63fd-450b-8fa0-91319cffb642 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-2ae4113d-63fd-450b-8fa0-91319cffb642 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-2ae4113d-63fd-450b-8fa0-91319cffb642 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-2ae4113d-63fd-450b-8fa0-91319cffb642 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;margin: 0.25em 0.25em;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;}#sk-2ae4113d-63fd-450b-8fa0-91319cffb642 div.sk-estimator:hover {background-color: #d4ebff;}#sk-2ae4113d-63fd-450b-8fa0-91319cffb642 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-2ae4113d-63fd-450b-8fa0-91319cffb642 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-2ae4113d-63fd-450b-8fa0-91319cffb642 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-2ae4113d-63fd-450b-8fa0-91319cffb642 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;}#sk-2ae4113d-63fd-450b-8fa0-91319cffb642 div.sk-item {z-index: 1;}#sk-2ae4113d-63fd-450b-8fa0-91319cffb642 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-2ae4113d-63fd-450b-8fa0-91319cffb642 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-2ae4113d-63fd-450b-8fa0-91319cffb642 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-2ae4113d-63fd-450b-8fa0-91319cffb642 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-2ae4113d-63fd-450b-8fa0-91319cffb642 div.sk-parallel-item:only-child::after {width: 0;}#sk-2ae4113d-63fd-450b-8fa0-91319cffb642 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0.2em;box-sizing: border-box;padding-bottom: 0.1em;background-color: white;position: relative;}#sk-2ae4113d-63fd-450b-8fa0-91319cffb642 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-2ae4113d-63fd-450b-8fa0-91319cffb642 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-2ae4113d-63fd-450b-8fa0-91319cffb642 div.sk-container {display: inline-block;position: relative;}</style><div id="sk-2ae4113d-63fd-450b-8fa0-91319cffb642" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="daf79844-4f66-4f1f-ab32-9d9970e886cc" type="checkbox" ><label class="sk-toggleable__label" for="daf79844-4f66-4f1f-ab32-9d9970e886cc">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[('columntransformer',
                     ColumnTransformer(transformers=[('pipeline',
                                                      Pipeline(steps=[('standardscaler',
                                                                       StandardScaler()),
                                                                      ('simpleimputer',
                                                                       SimpleImputer(add_indicator=True))]),
                                                      <sklearn.compose._column_transformer.make_column_selector object at 0x7f316935d3d0>),
                                                     ('onehotencoder',
                                                      OneHotEncoder(handle_unknown='ignore'),
                                                      <sklearn.compose._column_transformer.make_column_selector object at 0x7f316935d100>)])),
                    ('lassocv', LassoCV())])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="215d377c-10cd-491d-b461-f65aa73ab464" type="checkbox" ><label class="sk-toggleable__label" for="215d377c-10cd-491d-b461-f65aa73ab464">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('pipeline',
                                     Pipeline(steps=[('standardscaler',
                                                      StandardScaler()),
                                                     ('simpleimputer',
                                                      SimpleImputer(add_indicator=True))]),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f316935d3d0>),
                                    ('onehotencoder',
                                     OneHotEncoder(handle_unknown='ignore'),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f316935d100>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="e4f90ff1-bfed-4332-b210-2997535963a0" type="checkbox" ><label class="sk-toggleable__label" for="e4f90ff1-bfed-4332-b210-2997535963a0">pipeline</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f316935d3d0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="bbdc7f01-afd4-436e-8dfc-e99b1fe820d8" type="checkbox" ><label class="sk-toggleable__label" for="bbdc7f01-afd4-436e-8dfc-e99b1fe820d8">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="1af2c2a0-06c6-4df9-98c7-79e9ddf75c36" type="checkbox" ><label class="sk-toggleable__label" for="1af2c2a0-06c6-4df9-98c7-79e9ddf75c36">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="9a91d72c-e862-4bc2-90d6-3326913bc3c8" type="checkbox" ><label class="sk-toggleable__label" for="9a91d72c-e862-4bc2-90d6-3326913bc3c8">onehotencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f316935d100></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="50470911-be2d-46fb-a193-41020b297712" type="checkbox" ><label class="sk-toggleable__label" for="50470911-be2d-46fb-a193-41020b297712">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown='ignore')</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="90f14efa-b3e9-4594-a813-c3c2a6774686" type="checkbox" ><label class="sk-toggleable__label" for="90f14efa-b3e9-4594-a813-c3c2a6774686">LassoCV</label><div class="sk-toggleable__content"><pre>LassoCV()</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 156-162

.. code-block:: default

    from sklearn.ensemble import RandomForestRegressor

    rf_pipeline = make_pipeline(
        tree_preprocessor, RandomForestRegressor(random_state=42))
    rf_pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-076ed3bc-477e-4c5f-a30e-b0c3e037068e {color: black;background-color: white;}#sk-076ed3bc-477e-4c5f-a30e-b0c3e037068e pre{padding: 0;}#sk-076ed3bc-477e-4c5f-a30e-b0c3e037068e div.sk-toggleable {background-color: white;}#sk-076ed3bc-477e-4c5f-a30e-b0c3e037068e label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.2em 0.3em;box-sizing: border-box;text-align: center;}#sk-076ed3bc-477e-4c5f-a30e-b0c3e037068e div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-076ed3bc-477e-4c5f-a30e-b0c3e037068e div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-076ed3bc-477e-4c5f-a30e-b0c3e037068e input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-076ed3bc-477e-4c5f-a30e-b0c3e037068e div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-076ed3bc-477e-4c5f-a30e-b0c3e037068e div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-076ed3bc-477e-4c5f-a30e-b0c3e037068e input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-076ed3bc-477e-4c5f-a30e-b0c3e037068e div.sk-estimator {font-family: monospace;background-color: #f0f8ff;margin: 0.25em 0.25em;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;}#sk-076ed3bc-477e-4c5f-a30e-b0c3e037068e div.sk-estimator:hover {background-color: #d4ebff;}#sk-076ed3bc-477e-4c5f-a30e-b0c3e037068e div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-076ed3bc-477e-4c5f-a30e-b0c3e037068e div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-076ed3bc-477e-4c5f-a30e-b0c3e037068e div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-076ed3bc-477e-4c5f-a30e-b0c3e037068e div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;}#sk-076ed3bc-477e-4c5f-a30e-b0c3e037068e div.sk-item {z-index: 1;}#sk-076ed3bc-477e-4c5f-a30e-b0c3e037068e div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-076ed3bc-477e-4c5f-a30e-b0c3e037068e div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-076ed3bc-477e-4c5f-a30e-b0c3e037068e div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-076ed3bc-477e-4c5f-a30e-b0c3e037068e div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-076ed3bc-477e-4c5f-a30e-b0c3e037068e div.sk-parallel-item:only-child::after {width: 0;}#sk-076ed3bc-477e-4c5f-a30e-b0c3e037068e div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0.2em;box-sizing: border-box;padding-bottom: 0.1em;background-color: white;position: relative;}#sk-076ed3bc-477e-4c5f-a30e-b0c3e037068e div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-076ed3bc-477e-4c5f-a30e-b0c3e037068e div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-076ed3bc-477e-4c5f-a30e-b0c3e037068e div.sk-container {display: inline-block;position: relative;}</style><div id="sk-076ed3bc-477e-4c5f-a30e-b0c3e037068e" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f33faff5-8f7d-4ef5-9a98-9238958a0166" type="checkbox" ><label class="sk-toggleable__label" for="f33faff5-8f7d-4ef5-9a98-9238958a0166">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[('columntransformer',
                     ColumnTransformer(transformers=[('simpleimputer',
                                                      SimpleImputer(add_indicator=True),
                                                      <sklearn.compose._column_transformer.make_column_selector object at 0x7f316935d3d0>),
                                                     ('ordinalencoder',
                                                      OrdinalEncoder(handle_unknown='use_encoded_value',
                                                                     unknown_value=-1),
                                                      <sklearn.compose._column_transformer.make_column_selector object at 0x7f316935d100>)])),
                    ('randomforestregressor',
                     RandomForestRegressor(random_state=42))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="7b562a1d-e690-4c10-b2b0-b27d433997fd" type="checkbox" ><label class="sk-toggleable__label" for="7b562a1d-e690-4c10-b2b0-b27d433997fd">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('simpleimputer',
                                     SimpleImputer(add_indicator=True),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f316935d3d0>),
                                    ('ordinalencoder',
                                     OrdinalEncoder(handle_unknown='use_encoded_value',
                                                    unknown_value=-1),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f316935d100>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="0b5ef48f-f1cd-4b83-a9b8-61bd05acd91d" type="checkbox" ><label class="sk-toggleable__label" for="0b5ef48f-f1cd-4b83-a9b8-61bd05acd91d">simpleimputer</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f316935d3d0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="6e8c0342-e29d-4898-9df5-98a47b647d03" type="checkbox" ><label class="sk-toggleable__label" for="6e8c0342-e29d-4898-9df5-98a47b647d03">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="0be1a306-473f-4ca4-9745-fb75151566ab" type="checkbox" ><label class="sk-toggleable__label" for="0be1a306-473f-4ca4-9745-fb75151566ab">ordinalencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f316935d100></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="3d9a9f67-3789-4ed1-a13b-09980846dd0e" type="checkbox" ><label class="sk-toggleable__label" for="3d9a9f67-3789-4ed1-a13b-09980846dd0e">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="3dded126-a0f0-4630-b95f-43c7c97061dc" type="checkbox" ><label class="sk-toggleable__label" for="3dded126-a0f0-4630-b95f-43c7c97061dc">RandomForestRegressor</label><div class="sk-toggleable__content"><pre>RandomForestRegressor(random_state=42)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 163-169

.. code-block:: default

    from sklearn.ensemble import HistGradientBoostingRegressor

    gbdt_pipeline = make_pipeline(
        tree_preprocessor, HistGradientBoostingRegressor(random_state=0))
    gbdt_pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-5a7a8406-2175-4316-b71b-4fc355238505 {color: black;background-color: white;}#sk-5a7a8406-2175-4316-b71b-4fc355238505 pre{padding: 0;}#sk-5a7a8406-2175-4316-b71b-4fc355238505 div.sk-toggleable {background-color: white;}#sk-5a7a8406-2175-4316-b71b-4fc355238505 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.2em 0.3em;box-sizing: border-box;text-align: center;}#sk-5a7a8406-2175-4316-b71b-4fc355238505 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-5a7a8406-2175-4316-b71b-4fc355238505 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-5a7a8406-2175-4316-b71b-4fc355238505 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-5a7a8406-2175-4316-b71b-4fc355238505 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-5a7a8406-2175-4316-b71b-4fc355238505 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-5a7a8406-2175-4316-b71b-4fc355238505 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-5a7a8406-2175-4316-b71b-4fc355238505 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;margin: 0.25em 0.25em;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;}#sk-5a7a8406-2175-4316-b71b-4fc355238505 div.sk-estimator:hover {background-color: #d4ebff;}#sk-5a7a8406-2175-4316-b71b-4fc355238505 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-5a7a8406-2175-4316-b71b-4fc355238505 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-5a7a8406-2175-4316-b71b-4fc355238505 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-5a7a8406-2175-4316-b71b-4fc355238505 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;}#sk-5a7a8406-2175-4316-b71b-4fc355238505 div.sk-item {z-index: 1;}#sk-5a7a8406-2175-4316-b71b-4fc355238505 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-5a7a8406-2175-4316-b71b-4fc355238505 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-5a7a8406-2175-4316-b71b-4fc355238505 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-5a7a8406-2175-4316-b71b-4fc355238505 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-5a7a8406-2175-4316-b71b-4fc355238505 div.sk-parallel-item:only-child::after {width: 0;}#sk-5a7a8406-2175-4316-b71b-4fc355238505 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0.2em;box-sizing: border-box;padding-bottom: 0.1em;background-color: white;position: relative;}#sk-5a7a8406-2175-4316-b71b-4fc355238505 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-5a7a8406-2175-4316-b71b-4fc355238505 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-5a7a8406-2175-4316-b71b-4fc355238505 div.sk-container {display: inline-block;position: relative;}</style><div id="sk-5a7a8406-2175-4316-b71b-4fc355238505" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="2c1b0013-5950-4b15-bd66-0d5e1cd798d2" type="checkbox" ><label class="sk-toggleable__label" for="2c1b0013-5950-4b15-bd66-0d5e1cd798d2">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[('columntransformer',
                     ColumnTransformer(transformers=[('simpleimputer',
                                                      SimpleImputer(add_indicator=True),
                                                      <sklearn.compose._column_transformer.make_column_selector object at 0x7f316935d3d0>),
                                                     ('ordinalencoder',
                                                      OrdinalEncoder(handle_unknown='use_encoded_value',
                                                                     unknown_value=-1),
                                                      <sklearn.compose._column_transformer.make_column_selector object at 0x7f316935d100>)])),
                    ('histgradientboostingregressor',
                     HistGradientBoostingRegressor(random_state=0))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="5a649086-c116-4cdf-94b3-488c6c68a2b8" type="checkbox" ><label class="sk-toggleable__label" for="5a649086-c116-4cdf-94b3-488c6c68a2b8">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('simpleimputer',
                                     SimpleImputer(add_indicator=True),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f316935d3d0>),
                                    ('ordinalencoder',
                                     OrdinalEncoder(handle_unknown='use_encoded_value',
                                                    unknown_value=-1),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f316935d100>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="5440b421-a5e4-466f-814d-3c40576ac1a6" type="checkbox" ><label class="sk-toggleable__label" for="5440b421-a5e4-466f-814d-3c40576ac1a6">simpleimputer</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f316935d3d0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="a28c24e0-9fa0-4d8e-b1c4-0f50ece86cff" type="checkbox" ><label class="sk-toggleable__label" for="a28c24e0-9fa0-4d8e-b1c4-0f50ece86cff">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="db4be295-09de-494e-8e99-1e70a6b96ff3" type="checkbox" ><label class="sk-toggleable__label" for="db4be295-09de-494e-8e99-1e70a6b96ff3">ordinalencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f316935d100></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="8fd02a4a-b464-4a06-8816-36c2242c0307" type="checkbox" ><label class="sk-toggleable__label" for="8fd02a4a-b464-4a06-8816-36c2242c0307">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="0b3782df-b9ea-4c11-b5d9-ad0806c2e26f" type="checkbox" ><label class="sk-toggleable__label" for="0b3782df-b9ea-4c11-b5d9-ad0806c2e26f">HistGradientBoostingRegressor</label><div class="sk-toggleable__content"><pre>HistGradientBoostingRegressor(random_state=0)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 170-181

.. code-block:: default

    from sklearn.ensemble import StackingRegressor
    from sklearn.linear_model import RidgeCV

    estimators = [('Random Forest', rf_pipeline),
                  ('Lasso', lasso_pipeline),
                  ('Gradient Boosting', gbdt_pipeline)]

    stacking_regressor = StackingRegressor(
        estimators=estimators, final_estimator=RidgeCV())
    stacking_regressor






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-a5ecccb5-340a-4188-83b4-df922323b32b {color: black;background-color: white;}#sk-a5ecccb5-340a-4188-83b4-df922323b32b pre{padding: 0;}#sk-a5ecccb5-340a-4188-83b4-df922323b32b div.sk-toggleable {background-color: white;}#sk-a5ecccb5-340a-4188-83b4-df922323b32b label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.2em 0.3em;box-sizing: border-box;text-align: center;}#sk-a5ecccb5-340a-4188-83b4-df922323b32b div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-a5ecccb5-340a-4188-83b4-df922323b32b div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-a5ecccb5-340a-4188-83b4-df922323b32b input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-a5ecccb5-340a-4188-83b4-df922323b32b div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-a5ecccb5-340a-4188-83b4-df922323b32b div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-a5ecccb5-340a-4188-83b4-df922323b32b input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-a5ecccb5-340a-4188-83b4-df922323b32b div.sk-estimator {font-family: monospace;background-color: #f0f8ff;margin: 0.25em 0.25em;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;}#sk-a5ecccb5-340a-4188-83b4-df922323b32b div.sk-estimator:hover {background-color: #d4ebff;}#sk-a5ecccb5-340a-4188-83b4-df922323b32b div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-a5ecccb5-340a-4188-83b4-df922323b32b div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-a5ecccb5-340a-4188-83b4-df922323b32b div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-a5ecccb5-340a-4188-83b4-df922323b32b div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;}#sk-a5ecccb5-340a-4188-83b4-df922323b32b div.sk-item {z-index: 1;}#sk-a5ecccb5-340a-4188-83b4-df922323b32b div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-a5ecccb5-340a-4188-83b4-df922323b32b div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-a5ecccb5-340a-4188-83b4-df922323b32b div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-a5ecccb5-340a-4188-83b4-df922323b32b div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-a5ecccb5-340a-4188-83b4-df922323b32b div.sk-parallel-item:only-child::after {width: 0;}#sk-a5ecccb5-340a-4188-83b4-df922323b32b div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0.2em;box-sizing: border-box;padding-bottom: 0.1em;background-color: white;position: relative;}#sk-a5ecccb5-340a-4188-83b4-df922323b32b div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-a5ecccb5-340a-4188-83b4-df922323b32b div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-a5ecccb5-340a-4188-83b4-df922323b32b div.sk-container {display: inline-block;position: relative;}</style><div id="sk-a5ecccb5-340a-4188-83b4-df922323b32b" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="33b820e0-ead9-46fa-b07f-02c81014ec7c" type="checkbox" ><label class="sk-toggleable__label" for="33b820e0-ead9-46fa-b07f-02c81014ec7c">StackingRegressor</label><div class="sk-toggleable__content"><pre>StackingRegressor(estimators=[('Random Forest',
                                   Pipeline(steps=[('columntransformer',
                                                    ColumnTransformer(transformers=[('simpleimputer',
                                                                                     SimpleImputer(add_indicator=True),
                                                                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f316935d3d0>),
                                                                                    ('ordinalencoder',
                                                                                     OrdinalEncoder(handle_unknown='use_encoded_value',
                                                                                                    unknown_value=-1),
                                                                                     <sklearn.compose...
                                                                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f316935d3d0>),
                                                                                    ('ordinalencoder',
                                                                                     OrdinalEncoder(handle_unknown='use_encoded_value',
                                                                                                    unknown_value=-1),
                                                                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f316935d100>)])),
                                                   ('histgradientboostingregressor',
                                                    HistGradientBoostingRegressor(random_state=0))]))],
                      final_estimator=RidgeCV(alphas=array([ 0.1,  1. , 10. ])))</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>Random Forest</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="e0e88b4a-7373-4b80-8a34-91521b838aab" type="checkbox" ><label class="sk-toggleable__label" for="e0e88b4a-7373-4b80-8a34-91521b838aab">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('simpleimputer',
                                     SimpleImputer(add_indicator=True),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f316935d3d0>),
                                    ('ordinalencoder',
                                     OrdinalEncoder(handle_unknown='use_encoded_value',
                                                    unknown_value=-1),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f316935d100>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="c1811c92-85be-4d63-847a-d568edfbb322" type="checkbox" ><label class="sk-toggleable__label" for="c1811c92-85be-4d63-847a-d568edfbb322">simpleimputer</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f316935d3d0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="562edfe4-f7b4-418d-b727-95f0e2462a83" type="checkbox" ><label class="sk-toggleable__label" for="562edfe4-f7b4-418d-b727-95f0e2462a83">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="afc32f89-ae1a-4cc6-972d-0f163aa5d530" type="checkbox" ><label class="sk-toggleable__label" for="afc32f89-ae1a-4cc6-972d-0f163aa5d530">ordinalencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f316935d100></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="905e5af8-6258-44e3-8592-6eedbf596638" type="checkbox" ><label class="sk-toggleable__label" for="905e5af8-6258-44e3-8592-6eedbf596638">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="390aafa6-d6e2-4fff-9288-1c32cf7d59a1" type="checkbox" ><label class="sk-toggleable__label" for="390aafa6-d6e2-4fff-9288-1c32cf7d59a1">RandomForestRegressor</label><div class="sk-toggleable__content"><pre>RandomForestRegressor(random_state=42)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>Lasso</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d30c09a6-9546-4222-ad88-5eb52baa0b5c" type="checkbox" ><label class="sk-toggleable__label" for="d30c09a6-9546-4222-ad88-5eb52baa0b5c">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('pipeline',
                                     Pipeline(steps=[('standardscaler',
                                                      StandardScaler()),
                                                     ('simpleimputer',
                                                      SimpleImputer(add_indicator=True))]),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f316935d3d0>),
                                    ('onehotencoder',
                                     OneHotEncoder(handle_unknown='ignore'),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f316935d100>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="40a66d6b-ada8-4960-a854-caf290b37f40" type="checkbox" ><label class="sk-toggleable__label" for="40a66d6b-ada8-4960-a854-caf290b37f40">pipeline</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f316935d3d0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="aa6db8aa-2ab6-4f7d-8921-1c93375bd5ee" type="checkbox" ><label class="sk-toggleable__label" for="aa6db8aa-2ab6-4f7d-8921-1c93375bd5ee">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="a13541cd-54cf-4651-9340-911b5176fa68" type="checkbox" ><label class="sk-toggleable__label" for="a13541cd-54cf-4651-9340-911b5176fa68">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="13c31f48-5988-4d6f-9535-2b4dea6d181e" type="checkbox" ><label class="sk-toggleable__label" for="13c31f48-5988-4d6f-9535-2b4dea6d181e">onehotencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f316935d100></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="b718d46c-4983-42b2-80c7-96939a17e286" type="checkbox" ><label class="sk-toggleable__label" for="b718d46c-4983-42b2-80c7-96939a17e286">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown='ignore')</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="b5f06b29-0abd-4aa5-98fd-042693dcc007" type="checkbox" ><label class="sk-toggleable__label" for="b5f06b29-0abd-4aa5-98fd-042693dcc007">LassoCV</label><div class="sk-toggleable__content"><pre>LassoCV()</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>Gradient Boosting</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="deb86c24-bc22-4978-9582-eab0f1ab7fee" type="checkbox" ><label class="sk-toggleable__label" for="deb86c24-bc22-4978-9582-eab0f1ab7fee">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('simpleimputer',
                                     SimpleImputer(add_indicator=True),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f316935d3d0>),
                                    ('ordinalencoder',
                                     OrdinalEncoder(handle_unknown='use_encoded_value',
                                                    unknown_value=-1),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f316935d100>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="6639587c-cd2a-42e3-9dcf-6bc48c3c2f9c" type="checkbox" ><label class="sk-toggleable__label" for="6639587c-cd2a-42e3-9dcf-6bc48c3c2f9c">simpleimputer</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f316935d3d0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="7d5d9a21-a922-4013-a475-e6f34a269e24" type="checkbox" ><label class="sk-toggleable__label" for="7d5d9a21-a922-4013-a475-e6f34a269e24">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="29293ad5-9cf3-48fc-8d76-0cd3179bb82e" type="checkbox" ><label class="sk-toggleable__label" for="29293ad5-9cf3-48fc-8d76-0cd3179bb82e">ordinalencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f316935d100></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="8067eeb6-184a-470c-a385-aae2afa37133" type="checkbox" ><label class="sk-toggleable__label" for="8067eeb6-184a-470c-a385-aae2afa37133">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="9ad6901d-a255-44cd-b3bc-0639b34a27da" type="checkbox" ><label class="sk-toggleable__label" for="9ad6901d-a255-44cd-b3bc-0639b34a27da">HistGradientBoostingRegressor</label><div class="sk-toggleable__content"><pre>HistGradientBoostingRegressor(random_state=0)</pre></div></div></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>final_estimator</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d86539d2-9413-4136-b142-5e79baa71620" type="checkbox" ><label class="sk-toggleable__label" for="d86539d2-9413-4136-b142-5e79baa71620">RidgeCV</label><div class="sk-toggleable__content"><pre>RidgeCV(alphas=array([ 0.1,  1. , 10. ]))</pre></div></div></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 182-191

Measure and plot the results
#############################################################################

 Now we can use Ames Housing dataset to make the predictions. We check the
 performance of each individual predictor as well as of the stack of the
 regressors.

 The function ``plot_regression_results`` is used to plot the predicted and
 true targets.

.. GENERATED FROM PYTHON SOURCE LINES 191-250

.. code-block:: default



    import time
    import matplotlib.pyplot as plt
    from sklearn.model_selection import cross_validate, cross_val_predict


    def plot_regression_results(ax, y_true, y_pred, title, scores, elapsed_time):
        """Scatter plot of the predicted vs true targets."""
        ax.plot([y_true.min(), y_true.max()],
                [y_true.min(), y_true.max()],
                '--r', linewidth=2)
        ax.scatter(y_true, y_pred, alpha=0.2)

        ax.spines['top'].set_visible(False)
        ax.spines['right'].set_visible(False)
        ax.get_xaxis().tick_bottom()
        ax.get_yaxis().tick_left()
        ax.spines['left'].set_position(('outward', 10))
        ax.spines['bottom'].set_position(('outward', 10))
        ax.set_xlim([y_true.min(), y_true.max()])
        ax.set_ylim([y_true.min(), y_true.max()])
        ax.set_xlabel('Measured')
        ax.set_ylabel('Predicted')
        extra = plt.Rectangle((0, 0), 0, 0, fc="w", fill=False,
                              edgecolor='none', linewidth=0)
        ax.legend([extra], [scores], loc='upper left')
        title = title + '\n Evaluation in {:.2f} seconds'.format(elapsed_time)
        ax.set_title(title)


    fig, axs = plt.subplots(2, 2, figsize=(9, 7))
    axs = np.ravel(axs)

    for ax, (name, est) in zip(axs, estimators + [('Stacking Regressor',
                                                   stacking_regressor)]):
        start_time = time.time()
        score = cross_validate(est, X, y,
                               scoring=['r2', 'neg_mean_absolute_error'],
                               n_jobs=-1, verbose=0)
        elapsed_time = time.time() - start_time

        y_pred = cross_val_predict(est, X, y, n_jobs=-1, verbose=0)

        plot_regression_results(
            ax, y, y_pred,
            name,
            (r'$R^2={:.2f} \pm {:.2f}$' + '\n' + r'$MAE={:.2f} \pm {:.2f}$')
            .format(np.mean(score['test_r2']),
                    np.std(score['test_r2']),
                    -np.mean(score['test_neg_mean_absolute_error']),
                    np.std(score['test_neg_mean_absolute_error'])),
            elapsed_time)

    plt.suptitle('Single predictors versus stacked predictors')
    plt.tight_layout()
    plt.subplots_adjust(top=0.9)
    plt.show()




.. image:: /auto_examples/ensemble/images/sphx_glr_plot_stack_predictors_001.png
    :alt: Single predictors versus stacked predictors, Random Forest  Evaluation in 1.72 seconds, Lasso  Evaluation in 0.70 seconds, Gradient Boosting  Evaluation in 1.03 seconds, Stacking Regressor  Evaluation in 16.61 seconds
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 251-254

The stacked regressor will combine the strengths of the different regressors.
However, we also see that training the stacked regressor is much more
computationally expensive.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  40.698 seconds)


.. _sphx_glr_download_auto_examples_ensemble_plot_stack_predictors.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/scikit-learn/scikit-learn/main?urlpath=lab/tree/notebooks/auto_examples/ensemble/plot_stack_predictors.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_stack_predictors.py <plot_stack_predictors.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_stack_predictors.ipynb <plot_stack_predictors.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
