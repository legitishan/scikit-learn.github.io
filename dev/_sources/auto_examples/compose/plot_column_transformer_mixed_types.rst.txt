.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_compose_plot_column_transformer_mixed_types.py>`     to download the full example code or to run this example in your browser via Binder
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_examples_compose_plot_column_transformer_mixed_types.py:


===================================
Column Transformer with Mixed Types
===================================

.. currentmodule:: sklearn

This example illustrates how to apply different preprocessing and feature
extraction pipelines to different subsets of features, using
:class:`~compose.ColumnTransformer`. This is particularly handy for the
case of datasets that contain heterogeneous data types, since we may want to
scale the numeric features and one-hot encode the categorical ones.

In this example, the numeric data is standard-scaled after mean-imputation,
while the categorical data is one-hot encoded after imputing missing values
with a new category (``'missing'``).

In addition, we show two different ways to dispatch the columns to the
particular pre-processor: by column names and by column data types.

Finally, the preprocessing pipeline is integrated in a full prediction pipeline
using :class:`~pipeline.Pipeline`, together with a simple classification
model.


.. code-block:: default


    # Author: Pedro Morales <part.morales@gmail.com>
    #
    # License: BSD 3 clause

    import numpy as np

    from sklearn.compose import ColumnTransformer
    from sklearn.datasets import fetch_openml
    from sklearn.pipeline import Pipeline
    from sklearn.impute import SimpleImputer
    from sklearn.preprocessing import StandardScaler, OneHotEncoder
    from sklearn.linear_model import LogisticRegression
    from sklearn.model_selection import train_test_split, GridSearchCV

    np.random.seed(0)

    # Load data from https://www.openml.org/d/40945
    X, y = fetch_openml("titanic", version=1, as_frame=True, return_X_y=True)

    # Alternatively X and y can be obtained directly from the frame attribute:
    # X = titanic.frame.drop('survived', axis=1)
    # y = titanic.frame['survived']








Use ``ColumnTransformer`` by selecting column by names
##############################################################################
 We will train our classifier with the following features:

 Numeric Features:

 * ``age``: float;
 * ``fare``: float.

 Categorical Features:

 * ``embarked``: categories encoded as strings ``{'C', 'S', 'Q'}``;
 * ``sex``: categories encoded as strings ``{'female', 'male'}``;
 * ``pclass``: ordinal integers ``{1, 2, 3}``.

 We create the preprocessing pipelines for both numeric and categorical data.
 Note that ``pclass`` could either be treated as a categorical or numeric
 feature.


.. code-block:: default


    numeric_features = ['age', 'fare']
    numeric_transformer = Pipeline(steps=[
        ('imputer', SimpleImputer(strategy='median')),
        ('scaler', StandardScaler())])

    categorical_features = ['embarked', 'sex', 'pclass']
    categorical_transformer = Pipeline(steps=[
        ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),
        ('onehot', OneHotEncoder(handle_unknown='ignore'))])

    preprocessor = ColumnTransformer(
        transformers=[
            ('num', numeric_transformer, numeric_features),
            ('cat', categorical_transformer, categorical_features)])

    # Append classifier to preprocessing pipeline.
    # Now we have a full prediction pipeline.
    clf = Pipeline(steps=[('preprocessor', preprocessor),
                          ('classifier', LogisticRegression())])

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,
                                                        random_state=0)

    clf.fit(X_train, y_train)
    print("model score: %.3f" % clf.score(X_test, y_test))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    model score: 0.790




HTML representation of ``Pipeline``
##############################################################################
 When the ``Pipeline`` is printed out in a jupyter notebook an HTML
 representation of the estimator is displayed as follows:


.. code-block:: default

    from sklearn import set_config

    set_config(display='diagram')
    clf






.. only:: builder_html

    .. raw:: html

        <style>div.sk-top-container {color: black;background-color: white;}div.sk-toggleable {background-color: white;}label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.2em 0.3em;box-sizing: border-box;text-align: center;}div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}div.sk-estimator {font-family: monospace;background-color: #f0f8ff;margin: 0.25em 0.25em;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;}div.sk-estimator:hover {background-color: #d4ebff;}div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;}div.sk-item {z-index: 1;}div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}div.sk-parallel-item:only-child::after {width: 0;}div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0.2em;box-sizing: border-box;padding-bottom: 0.1em;background-color: white;position: relative;}div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}div.sk-label-container {position: relative;z-index: 2;text-align: center;}div.sk-container {display: inline-block;position: relative;}</style><div class="sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="5bacb6a1-a3f2-4f17-a7cd-d28f5360dfb7" type="checkbox" ><label class="sk-toggleable__label" for="5bacb6a1-a3f2-4f17-a7cd-d28f5360dfb7">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[('preprocessor',
                         ColumnTransformer(transformers=[('num',
                                                          Pipeline(steps=[('imputer',
                                                                           SimpleImputer(strategy='median')),
                                                                          ('scaler',
                                                                           StandardScaler())]),
                                                          ['age', 'fare']),
                                                         ('cat',
                                                          Pipeline(steps=[('imputer',
                                                                           SimpleImputer(fill_value='missing',
                                                                                         strategy='constant')),
                                                                          ('onehot',
                                                                           OneHotEncoder(handle_unknown='ignore'))]),
                                                          ['embarked', 'sex',
                                                           'pclass'])])),
                        ('classifier', LogisticRegression())])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="a803a44d-0d1e-4b67-b021-370fd09866e7" type="checkbox" ><label class="sk-toggleable__label" for="a803a44d-0d1e-4b67-b021-370fd09866e7">preprocessor: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('num',
                                         Pipeline(steps=[('imputer',
                                                          SimpleImputer(strategy='median')),
                                                         ('scaler', StandardScaler())]),
                                         ['age', 'fare']),
                                        ('cat',
                                         Pipeline(steps=[('imputer',
                                                          SimpleImputer(fill_value='missing',
                                                                        strategy='constant')),
                                                         ('onehot',
                                                          OneHotEncoder(handle_unknown='ignore'))]),
                                         ['embarked', 'sex', 'pclass'])])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="debbe02b-aac8-400f-858c-769afaf88607" type="checkbox" ><label class="sk-toggleable__label" for="debbe02b-aac8-400f-858c-769afaf88607">num</label><div class="sk-toggleable__content"><pre>['age', 'fare']</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="bdc45017-eb3a-417e-a589-a1bb4448e5f2" type="checkbox" ><label class="sk-toggleable__label" for="bdc45017-eb3a-417e-a589-a1bb4448e5f2">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(strategy='median')</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="b770f9da-f909-4c54-bd57-8ac33531978f" type="checkbox" ><label class="sk-toggleable__label" for="b770f9da-f909-4c54-bd57-8ac33531978f">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="79a059c8-7a39-4ac3-918d-978f1dc7ebbb" type="checkbox" ><label class="sk-toggleable__label" for="79a059c8-7a39-4ac3-918d-978f1dc7ebbb">cat</label><div class="sk-toggleable__content"><pre>['embarked', 'sex', 'pclass']</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="da001687-201c-46cc-9a34-66520ffaf57e" type="checkbox" ><label class="sk-toggleable__label" for="da001687-201c-46cc-9a34-66520ffaf57e">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(fill_value='missing', strategy='constant')</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="742b3b3c-ff8c-4e7f-a41e-84b8f397bff2" type="checkbox" ><label class="sk-toggleable__label" for="742b3b3c-ff8c-4e7f-a41e-84b8f397bff2">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown='ignore')</pre></div></div></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="52533558-c509-43b6-a989-0a9212091523" type="checkbox" ><label class="sk-toggleable__label" for="52533558-c509-43b6-a989-0a9212091523">LogisticRegression</label><div class="sk-toggleable__content"><pre>LogisticRegression()</pre></div></div></div></div></div></div></div>
        <br />
        <br />

Use ``ColumnTransformer`` by selecting column by data types
##############################################################################
 When dealing with a cleaned dataset, the preprocessing can be automatic by
 using the data types of the column to decide whether to treat a column as a
 numerical or categorical feature.
 :func:`sklearn.compose.make_column_selector` gives this possibility.
 First, let's only select a subset of columns to simplify our
 example.


.. code-block:: default


    subset_feature = ['embarked', 'sex', 'pclass', 'age', 'fare']
    X_train, X_test = X_train[subset_feature], X_test[subset_feature]








Then, we introspect the information regarding each column data type.


.. code-block:: default


    X_train.info()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <class 'pandas.core.frame.DataFrame'>
    Int64Index: 1047 entries, 1118 to 684
    Data columns (total 5 columns):
     #   Column    Non-Null Count  Dtype   
    ---  ------    --------------  -----   
     0   embarked  1045 non-null   category
     1   sex       1047 non-null   category
     2   pclass    1047 non-null   float64 
     3   age       841 non-null    float64 
     4   fare      1046 non-null   float64 
    dtypes: category(2), float64(3)
    memory usage: 35.0 KB




We can observe that the `embarked` and `sex` columns were tagged as
`category` columns when loading the data with ``fetch_openml``. Therefore, we
can use this information to dispatch the categorical columns to the
``categorical_transformer`` and the remaining columns to the
``numerical_transformer``.

.. note:: In practice, you will have to handle yourself the column data type.
   If you want some columns to be considered as `category`, you will have to
   convert them into categorical columns. If you are using pandas, you can
   refer to their documentation regarding `Categorical data
   <https://pandas.pydata.org/pandas-docs/stable/user_guide/categorical.html>`_.


.. code-block:: default


    from sklearn.compose import make_column_selector as selector

    preprocessor = ColumnTransformer(transformers=[
        ('num', numeric_transformer, selector(dtype_exclude="category")),
        ('cat', categorical_transformer, selector(dtype_include="category"))
    ])
    clf = Pipeline(steps=[('preprocessor', preprocessor),
                          ('classifier', LogisticRegression())])


    clf.fit(X_train, y_train)
    print("model score: %.3f" % clf.score(X_test, y_test))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    model score: 0.794




The resulting score is not exactly the same as the one from the previous
pipeline becase the dtype-based selector treats the ``pclass`` columns as
a numeric features instead of a categorical feature as previously:


.. code-block:: default


    selector(dtype_exclude="category")(X_train)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ['pclass', 'age', 'fare']




.. code-block:: default


    selector(dtype_include="category")(X_train)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ['embarked', 'sex']



Using the prediction pipeline in a grid search
#############################################################################
 Grid search can also be performed on the different preprocessing steps
 defined in the ``ColumnTransformer`` object, together with the classifier's
 hyperparameters as part of the ``Pipeline``.
 We will search for both the imputer strategy of the numeric preprocessing
 and the regularization parameter of the logistic regression using
 :class:`~sklearn.model_selection.GridSearchCV`.


.. code-block:: default


    param_grid = {
        'preprocessor__num__imputer__strategy': ['mean', 'median'],
        'classifier__C': [0.1, 1.0, 10, 100],
    }

    grid_search = GridSearchCV(clf, param_grid, cv=10)
    grid_search






.. only:: builder_html

    .. raw:: html

        <style>div.sk-top-container {color: black;background-color: white;}div.sk-toggleable {background-color: white;}label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.2em 0.3em;box-sizing: border-box;text-align: center;}div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}div.sk-estimator {font-family: monospace;background-color: #f0f8ff;margin: 0.25em 0.25em;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;}div.sk-estimator:hover {background-color: #d4ebff;}div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;}div.sk-item {z-index: 1;}div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}div.sk-parallel-item:only-child::after {width: 0;}div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0.2em;box-sizing: border-box;padding-bottom: 0.1em;background-color: white;position: relative;}div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}div.sk-label-container {position: relative;z-index: 2;text-align: center;}div.sk-container {display: inline-block;position: relative;}</style><div class="sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="72b1733b-2a67-43f8-a8b8-7a553201ee75" type="checkbox" ><label class="sk-toggleable__label" for="72b1733b-2a67-43f8-a8b8-7a553201ee75">GridSearchCV</label><div class="sk-toggleable__content"><pre>GridSearchCV(cv=10,
                     estimator=Pipeline(steps=[('preprocessor',
                                                ColumnTransformer(transformers=[('num',
                                                                                 Pipeline(steps=[('imputer',
                                                                                                  SimpleImputer(strategy='median')),
                                                                                                 ('scaler',
                                                                                                  StandardScaler())]),
                                                                                 <sklearn.compose._column_transformer.make_column_selector object at 0x7f60dbb178b0>),
                                                                                ('cat',
                                                                                 Pipeline(steps=[('imputer',
                                                                                                  SimpleImputer(fill_value='missing',
                                                                                                                strategy='constant')),
                                                                                                 ('onehot',
                                                                                                  OneHotEncoder(handle_unknown='ignore'))]),
                                                                                 <sklearn.compose._column_transformer.make_column_selector object at 0x7f60dbb17bb0>)])),
                                               ('classifier', LogisticRegression())]),
                     param_grid={'classifier__C': [0.1, 1.0, 10, 100],
                                 'preprocessor__num__imputer__strategy': ['mean',
                                                                          'median']})</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f1e1aa4d-ea1f-48aa-b7b1-57ec9c414255" type="checkbox" ><label class="sk-toggleable__label" for="f1e1aa4d-ea1f-48aa-b7b1-57ec9c414255">preprocessor: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('num',
                                         Pipeline(steps=[('imputer',
                                                          SimpleImputer(strategy='median')),
                                                         ('scaler', StandardScaler())]),
                                         <sklearn.compose._column_transformer.make_column_selector object at 0x7f60dbb178b0>),
                                        ('cat',
                                         Pipeline(steps=[('imputer',
                                                          SimpleImputer(fill_value='missing',
                                                                        strategy='constant')),
                                                         ('onehot',
                                                          OneHotEncoder(handle_unknown='ignore'))]),
                                         <sklearn.compose._column_transformer.make_column_selector object at 0x7f60dbb17bb0>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="c16d0113-39cc-4cdb-826e-8c49975bfa97" type="checkbox" ><label class="sk-toggleable__label" for="c16d0113-39cc-4cdb-826e-8c49975bfa97">num</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f60dbb178b0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="a6e7c64a-4e3d-4b06-8fb9-46acfdd4d1b9" type="checkbox" ><label class="sk-toggleable__label" for="a6e7c64a-4e3d-4b06-8fb9-46acfdd4d1b9">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(strategy='median')</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f2632760-22f9-4fba-99d4-2cb448125192" type="checkbox" ><label class="sk-toggleable__label" for="f2632760-22f9-4fba-99d4-2cb448125192">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="61c271be-472b-461d-b15e-0619cb05e24d" type="checkbox" ><label class="sk-toggleable__label" for="61c271be-472b-461d-b15e-0619cb05e24d">cat</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f60dbb17bb0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="be7fd4d3-b62e-4c7f-94f3-75c8cff395d3" type="checkbox" ><label class="sk-toggleable__label" for="be7fd4d3-b62e-4c7f-94f3-75c8cff395d3">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(fill_value='missing', strategy='constant')</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="24fef010-7f79-4a31-a80a-c8a17fcbaf24" type="checkbox" ><label class="sk-toggleable__label" for="24fef010-7f79-4a31-a80a-c8a17fcbaf24">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown='ignore')</pre></div></div></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d415a3eb-0a3b-41f9-a22d-45dbfa789dc6" type="checkbox" ><label class="sk-toggleable__label" for="d415a3eb-0a3b-41f9-a22d-45dbfa789dc6">LogisticRegression</label><div class="sk-toggleable__content"><pre>LogisticRegression()</pre></div></div></div></div></div></div></div></div></div></div></div></div>
        <br />
        <br />

Calling 'fit' triggers the cross-validated search for the best
hyper-parameters combination:



.. code-block:: default

    grid_search.fit(X_train, y_train)

    print(f"Best params:")
    print(grid_search.best_params_)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Best params:
    {'classifier__C': 0.1, 'preprocessor__num__imputer__strategy': 'mean'}




The internal cross-validation scores obtained by those parameters is:


.. code-block:: default

    print(f"Internal CV score: {grid_search.best_score_:.3f}")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Internal CV score: 0.784




We can also introspect the top grid search results as a pandas dataframe:


.. code-block:: default

    import pandas as pd

    cv_results = pd.DataFrame(grid_search.cv_results_)
    cv_results = cv_results.sort_values("mean_test_score", ascending=False)
    cv_results[["mean_test_score", "std_test_score",
                "param_preprocessor__num__imputer__strategy",
                "param_classifier__C"
                ]].head(5)






.. only:: builder_html

    .. raw:: html

        <div>
        <style scoped>
            .dataframe tbody tr th:only-of-type {
                vertical-align: middle;
            }

            .dataframe tbody tr th {
                vertical-align: top;
            }

            .dataframe thead th {
                text-align: right;
            }
        </style>
        <table border="1" class="dataframe">
          <thead>
            <tr style="text-align: right;">
              <th></th>
              <th>mean_test_score</th>
              <th>std_test_score</th>
              <th>param_preprocessor__num__imputer__strategy</th>
              <th>param_classifier__C</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <th>0</th>
              <td>0.784167</td>
              <td>0.035824</td>
              <td>mean</td>
              <td>0.1</td>
            </tr>
            <tr>
              <th>2</th>
              <td>0.780366</td>
              <td>0.032722</td>
              <td>mean</td>
              <td>1</td>
            </tr>
            <tr>
              <th>1</th>
              <td>0.780348</td>
              <td>0.037245</td>
              <td>median</td>
              <td>0.1</td>
            </tr>
            <tr>
              <th>4</th>
              <td>0.779414</td>
              <td>0.033105</td>
              <td>mean</td>
              <td>10</td>
            </tr>
            <tr>
              <th>6</th>
              <td>0.779414</td>
              <td>0.033105</td>
              <td>mean</td>
              <td>100</td>
            </tr>
          </tbody>
        </table>
        </div>
        <br />
        <br />

The best hyper-parameters have be used to re-fit a final model on the full
training set. We can evaluate that final model on held out test data that was
not used for hyparameter tuning.



.. code-block:: default

    print(("best logistic regression from grid search: %.3f"
           % grid_search.score(X_test, y_test)))




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    best logistic regression from grid search: 0.794





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.063 seconds)


.. _sphx_glr_download_auto_examples_compose_plot_column_transformer_mixed_types.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: https://mybinder.org/badge_logo.svg
      :target: https://mybinder.org/v2/gh/scikit-learn/scikit-learn/master?urlpath=lab/tree/notebooks/auto_examples/compose/plot_column_transformer_mixed_types.ipynb
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_column_transformer_mixed_types.py <plot_column_transformer_mixed_types.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_column_transformer_mixed_types.ipynb <plot_column_transformer_mixed_types.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
